popularity <- read.csv("miPrimerR/popularityOrdenadonuevo.csv")
str(popularity)
summary(popularity$X1)
sd(popularity$X1)
var(popularity$X1)
samplePopularity <- sample(x,31126)
samplePopularity <- sample(popularity,31126)
popularity <- sample(popularity,31126,replace=TRUE)
View(popularity)
help(sample)
popularity <- read.csv("miPrimerR/popularityOrdenadonuevo.csv")
popularity <- sample(popularity$X1,31126,replace=TRUE)
popularity <- data.frame(popularity)
colnames(popularity) <- c("Requests")
View(popularity)
popularityDf$Requests <-as.numeric(popularityDf$Requests)
popularity$Requests <-as.numeric(popularityDf$Requests)
popularity$Requests <-as.numeric(popularityDf$Requests)
popularity$Requests <-as.numeric(popularity$Requests)
popularityCompleteTf<-popularityCompleteDf[-1][, order(colMeans(-popularityCompleteDf[-1]))] # Order popularityCompleteDf
popularity<-popularity[-1][, order(colMeans(-popularity[-1]))] # Order popularityCompleteDf
View(popularity)
popularity<-popularity[, order(colMeans(-popularity))] # Order popularityCompleteDf
View(popularity)
popularity <- read.csv("miPrimerR/popularityOrdenadonuevo.csv")
popularity <- sample(popularity$X1,31126,replace=TRUE)
#popularity <- data.frame(popularity)
colnames(popularity) <- c("Requests")
popularity$Requests <-as.numeric(popularity$Requests)
popularity<-popularity[, order(colMeans(-popularity))] # Order popularityCompleteDf
popularity <- data.frame(popularity)
colnames(popularity) <- c("Requests")
popularity$Requests <-as.numeric(popularity$Requests)
popularity<-popularity[, order(colMeans(-popularity$Requests))] # Order popularityCompleteDf
popularity<-popularity[, order(-popularity$Requests)] # Order popularityCompleteDf
popularity<-popularity$Requests[, order(-popularity$Requests)] # Order popularityCompleteDf
popularity$Requests<-popularity[, order(-popularity$Requests)] # Order popularityCompleteDf
help(order)
newdata<-popularity[, order(popularity$Requests)] # Order popularityCompleteDf
newdata<-popularity[order(popularity$Requests),] # Order popularityCompleteDf
newdata<-data.frame(newdata)
View(newdata)
newdata<-popularity[order(-popularity$Requests),] # Order popularityCompleteDf
newdata<-data.frame(newdata)
View(popularity)
View(newdata)
popularity<-popularity[order(-popularity$Requests),] # Order popularityCompleteDf
popularity<-data.frame(newdata)
library("MASS")
library("survival")
library("fitdistrplus")
install.packages("MASS")
install.packages("MASS")
library("MASS")
library("survival")
library("fitdistrplus")
hist(popularity$newdata)
colnames(popularity) <- c("Requests")
popularity$Requests <-as.numeric(popularity$Requests)
plotdist(popularity$Requests, histo = TRUE, demp = TRUE)
fw<-fitdist(popularity$Requests,"weibull") # fn references to weibull distribution
summary(fw)
fg<-fitdist(popularity$Requests,"gamma") # fg references to gamma distribution
summary(fg)
fln<-fitdist(popularity$Requests,"lnorm") # fn references to normal distribution
summary(fln)
help(par)
help(mfrow)
par(mfrow=c(2,2))
plot.legend<-c("weibull","lognormal","gamma")
denscomp(list(fw, fln, fg), legendtext = plot.legend) #denscomp plots the histogram against fitted density functions
qqcomp(list(fw, fln, fg), legendtext = plot.legend) # qqcomp plots theoretical quantiles against empirical ones
# Only cdfcomp is able to plot fits of a discrete distribution.
cdfcomp(list(fw, fln, fg), legendtext = plot.legend) # cdfcomp plots the empirical cumulative distribution against fitted distribution functions
ppcomp(list(fw, fln, fg), legendtext = plot.legend) # ppcomp plots theoretical probabilities against empirical ones
plotdist(popularity$Requests, histo = TRUE, demp = TRUE)
denscomp(list(fw, fln, fg), legendtext = plot.legend) #denscomp plots the histogram against fitted density functions
library(actuar)
install.packages("actuar")
library("actuar")
library("actuar")
fendo.ln <- fitdist(popularity$Requests, "lnorm")
fendo.ll <- fitdist(popularity$Requests, "llogis", start = list(shape = 1, scale = 500))
fendo.P <- fitdist(popularity$Requests, "pareto", start = list(shape = 1, scale = 500))
fendo.B <- fitdist(popularity$Requests,"burr", start = list(shape1 = 0.3, shape2 = 1,  rate = 1))
cdfcomp(list(fendo.ln,fendo.ll,fendo.P,fendo.B),
xlogscale =TRUE, ylogscale = TRUE,
legendtext = c("lognormal", "loglogistic", "Pareto"," Burr"))
cdfcomp(list(fendo.ln,fendo.ll,fendo.P),
xlogscale =TRUE, ylogscale = TRUE,
legendtext = c("lognormal", "loglogistic", "Pareto"))
plot.legend <- c("lognormal", "loglogistic", "Pareto")
denscomp(list(fendo.ln, fendo.ll, fendo.P), legendtext = plot.legend) #denscomp plots the histogram against fitted density functions
# generate data
beta <- 0.05
n <- 100
temp <- data.frame(y = exp(beta * seq(n)) + rnorm(n), x = seq(n))
# plot data
plot(temp$x, temp$y)
# fit non-linear model
mod <- nls(y ~ exp(a + b * x), data = temp, start = list(a = 0, b = 0))
# add fitted curve
lines(temp$x, predict(mod, list(x = temp$x)))
View(temp)
# plot data
plot(temp$x, temp$y)
# fit non-linear model
mod <- nls(y ~ exp(a + b * x), data = temp, start = list(a = 0, b = 0))
# add fitted curve
lines(temp$x, predict(mod, list(x = temp$x)))
# add fitted curve
lines(temp$x, predict(mod, list(x = temp$x)),color="red")
# add fitted curve
lines(temp$x, predict(mod, list(x = temp$x)),color="red")
# add fitted curve
lines(temp$x, predict(mod, list(x = temp$x), col="red"))
# add fitted curve
lines(temp$x, predict(mod, list(x = temp$x), col="red"))
# add fitted curve
lines(temp$x, predict(mod, list(x = temp$x), col="black"))
# plot data
plot(popularity$Requests)
# fit non-linear model
mod <- nls(y ~ exp(a + b * x), data = temp, start = list(a = 0, b = 0))
# add fitted curve
lines(popularity$Requests, predict(mod, list(x = popularity$Requests)))
A <- structure(list(Time = c(0, 1, 2, 4, 6, 8, 9, 10, 11, 12, 13,
14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30),
Counts = c(126.6, 101.8, 71.6, 101.6, 68.1, 62.9, 45.5, 41.9,
46.3, 34.1, 38.2, 41.7, 24.7, 41.5, 36.6, 19.6,
22.8, 29.6, 23.5, 15.3, 13.4, 26.8, 9.8, 18.8, 25.9, 19.3)), .Names = c("Time", "Counts"), row.names = c(1L, 2L,
3L, 5L, 7L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 19L, 20L, 21L, 22L, 23L, 25L, 26L, 27L, 28L, 29L, 30L,
31L), class = "data.frame")
View(A)
A <- structure(list(Time = c(0, 1, 2, 4, 6, 8, 9, 10, 11, 12, 13,
14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30),
Counts = c(126.6, 101.8, 71.6, 101.6, 68.1, 62.9, 45.5, 41.9,
46.3, 34.1, 38.2, 41.7, 24.7, 41.5, 36.6, 19.6,
22.8, 29.6, 23.5, 15.3, 13.4, 26.8, 9.8, 18.8, 25.9, 19.3)), .Names = c("Time", "Counts"), row.names = c(1L, 2L,
3L, 5L, 7L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 19L, 20L, 21L, 22L, 23L, 25L, 26L, 27L, 28L, 29L, 30L,
31L), class = "data.frame")
View(A)
attach(A)
View(A)
names(A)
exponential.model <- lm(log(Counts)~ Time)
summary(exponential.model)
help(lm)
timevalues <- seq(0, 30, 0.1)
Counts.exponential2 <- exp(predict(exponential.model,list(Time=timevalues)))
plot(Time,Counts.pch=16)
plot(Time,Counts,pch=16)
lines(timevalues, Counts.exponential2,lwd=2, col = "red", xlab = "Time (s)", ylab = "Counts")
help(exp)
fitdistr(popularity$Requests,"exponential")
fe <- fitdistr(popularity$Requests,"exponential")
plot(fe)
help(fitdistr)
help(MASS)
help("MASS")
denscomp(fe, legendtext = "exponencial") #denscomp plots the histogram against fitted density functions
hist(fe, legendtext = "exponencial") #denscomp plots the histogram against fitted density functions
hist(fe) #denscomp plots the histogram against fitted density functions
fitDistr(popularity$Requests,nbin=20,plot=c("hist","qq"))
fitdistr(popularity$Requests,nbin=20,plot=c("hist","qq"))
fitdistr(popularity$Requests,"exponential",nbin=20,plot=c("hist","qq"))
install.packages("ggplot2")
library("ggplot2")
x <- seq(-2,2,0.5)
y <- pnorm)(x)
y <- pnorm(x)
?pnorm
y <- y1
y1 <- y
y2 <- pnorm(x,1,1)
plot(x, y1, type = "l", col = "green")
plot(x, y2, type = "l", col = "red")
?plot
plot(x,y1,type="l",col="red")
lines(x,y2,col="green")
plot( x, y1, type="l", col="red" )
par(new=TRUE)
plot( x, y2, type="l", col="green" )
plot( x, y1, type="l", col="red" )
par(new=TRUE)
plot( x, y2, type="l", col="green" )
q()
setwd("../Desktop/Programming Languages/lenguajes/sustentacion")
# Read from csv file
empresa <- read.csv2("ofertas_por_empresa.csv", sep = ",", header = FALSE)
horario <- read.csv2("ofertas_por_horario.csv", sep = ",", header = FALSE)
# Convert to a dataframe and add column names
colnames(empresa) <- c("nombre", "n_ofertas")
colnames(horario) <- c("empresa", "n_ofertas")
# Ordeno ascendentemente el dataset y le digo que prevalezca el orden al graficar
empresa <- empresa[order(empresa$n_ofertas, decreasing = TRUE),]
empresa$nombre <- factor(empresa$nombre, levels = empresa$nombre)
# Importo la liberia para graficar
library("ggplot2")
# Inicializo el dispositivo grafico para svg
svg(filename="Rplot%03d.svg", width=7, height=7, pointsize=12)
# Grafico el barplot
ggplot(empresa, aes(x=nombre, y=n_ofertas)) +
geom_bar(stat = "identity", position = "stack") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Numero de Ofertas por empresa")
# Grafico de pastel
porcentajes <- round(horario$n_ofertas/sum(horario$n_ofertas) * 100)
horario$empresa <- paste(horario$empresa, porcentajes) # add percents to labels
horario$empresa <- paste(horario$empresa,"%",sep="") # ad % to labels
pie(horario$n_ofertas, labels = horario$empresa, col=rainbow(length(horario$empresa)), main="Porcentajes de Ofertas por horarios")
dev.off()
#ggplot(empresa, aes(x=nombre, y=n_ofertas, fill=nombre)) +
#  geom_bar(stat = "identity", position = "stack") +
#  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#  theme(plot.title = element_text(size = rel(2)) )+
#  labs(x = NULL, y = "Number of Available Jobs in units",
#       fill = NULL)
